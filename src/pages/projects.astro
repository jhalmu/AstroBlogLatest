---
// Cache-Control -otsikon asettaminen vastauksiin
Astro.response.headers.set('Cache-Control', 'public, max-age=0, must-revalidate')

// Ympäristömuuttujien ja komponenttien tuonti
import ProjectCard from '../components/ProjectCard.astro'
import Layout from '../layouts/Layout.astro'

// Aseta esirenderöinti pois käytöstä
export const prerender = true

// GitHub API -konfiguraatio
const API_TOKEN = import.meta.env.API_TOKEN

// GraphQL-kysely GitHub-projektien hakemiseen
const query = `
{
  user(login: "jhalmu") {
    repositories(first: 10, orderBy: {field: UPDATED_AT, direction: DESC}, isFork: false) {
      nodes {
        name
        description
        url
        homepageUrl
        primaryLanguage {
          name
        }
        stargazerCount
        forkCount
        updatedAt
        repositoryTopics(first: 5) {
          nodes {
            topic {
              name
            }
          }
        }
        openGraphImageUrl
      }
    }
  }
}`

// GitHub GraphQL API endpoint
const GITHUB_API = 'https://api.github.com/graphql'
// Varmistu että API-token on saatavilla
if (!API_TOKEN) {
	throw new Error('API_TOKEN is not defined in environment variables')
}

// TypeScript-rajapinnat vastausten käsittelyyn
interface Repository {
	name: string
	description: string | null
	url: string
	homepageUrl: string | null
	primaryLanguage: { name: string } | null
	stargazerCount: number
	forkCount: number
	updatedAt: string
	repositoryTopics: {
		nodes: Array<{ topic: { name: string } }>
	}
	openGraphImageUrl: string
}

interface GitHubResponse {
	data?: {
		user?: {
			repositories?: {
				nodes: Repository[]
			}
		}
	}
	errors?: Array<{ message: string }>
}

// Projektien haku ja virheidenkäsittely
let repositories: Repository[] = []
try {
	const response = await fetch(GITHUB_API, {
		method: 'POST',
		headers: {
			Authorization: `Bearer ${API_TOKEN}`,
			'Content-Type': 'application/json'
		},
		body: JSON.stringify({ query })
	})

	if (!response.ok) {
		throw new Error(`GitHub API responded with status ${response.status}`)
	}

	const result: GitHubResponse = await response.json()

	if (result.errors) {
		throw new Error(result.errors.map((e) => e.message).join(', '))
	}

	repositories = result.data?.user?.repositories?.nodes || []
} catch (error) {
	console.error('Failed to fetch GitHub repositories:', error)
	// Tässä voisi olla varadata tai uudelleenohjaus virhetilanteessa
}
---

<Layout title="Projektit" description="Tutustu projekteihini ja GitHub-repositorioihini.">
	<div class="mx-auto flex-col">
		<div
			class="grid auto-cols-min grid-cols-1 gap-6 md:grid-cols-2"
			role="feed"
			aria-label="GitHub Projects"
		>
			{
				repositories.map((repo) => (
					<ProjectCard
						name={repo.name}
						updatedAt={repo.updatedAt}
						title={repo.name}
						description={repo.description || ''}
						url={repo.url}
						language={repo.primaryLanguage?.name}
						stars={repo.stargazerCount}
						forks={repo.forkCount}
						topics={repo.repositoryTopics.nodes.map((n) => n.topic.name)}
						image={repo.openGraphImageUrl}
					/>
				))
			}
		</div>

		{
			repositories.length === 0 && (
				<div class="py-12 text-center" role="alert" aria-live="polite">
					<h2 class="mb-4 text-2xl font-bold text-gray-900">No Projects Found</h2>
					<p class="text-gray-600">
						Please make sure your GitHub token is configured correctly and try again.
					</p>
				</div>
			)
		}
	</div>
</Layout>
